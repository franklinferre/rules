---
description: "JavaScript development rules for modern practices, performance, and maintainability, otimizado para o Cursor."
globs: ["**/*.js", "**/*.jsx"]
alwaysApply: false
---

# JavaScript Development Rules

## Core Principles
- **Modern JavaScript**: Utilize ES2024+ features and avoid outdated patterns.
- **Clean Code**: Write readable, maintainable, and self-documenting code.
- **Performance**: Optimize code for execution speed and resource efficiency.
- **Testability**: Design code for easy unit and integration testing.
- **Modularity**: Break down code into small, reusable modules.

## Architectural Compliance & Quality Gates

Para garantir a disciplina e a qualidade do código JavaScript, as seguintes regras de conformidade arquitetural e portões de qualidade devem ser rigorosamente seguidas. A falha em qualquer um desses pontos bloqueará o avanço da fase de desenvolvimento.

### Conformidade Arquitetural

*   **SoC (Separation of Concerns) Validation:**
    *   Cada arquivo, classe ou módulo JavaScript deve ter uma única responsabilidade bem definida.
    *   As interfaces entre módulos devem ser claras e com acoplamento mínimo.
    *   Evite god objects ou classes multifuncionais que violem o Princípio da Responsabilidade Única (SRP).

*   **File Size Compliance:**
    *   Arquivos `.js` e `.jsx` (código puro) **NÃO DEVEM EXCEDER 150 LINHAS** de código (excluindo comentários e linhas em branco).
    *   Se um arquivo exceder esses limites, ele deve ser refatorado e dividido em módulos menores e mais focados.

*   **DRY (Don\\'t Repeat Yourself) Enforcement:**
    *   Evite duplicação de código. Funções, classes e lógicas comuns devem ser abstraídos e reutilizados.
    *   Utilize herança, composição, interfaces ou utilitários para promover a reutilização.

*   **KISS (Keep It Simple, Stupid) Validation:**
    *   Prefira a solução mais simples e direta para um problema.
    *   Evite complexidade desnecessária, abstrações prematuras ou padrões de design excessivamente elaborados.
    *   O código deve ser fácil de entender e manter por outros desenvolvedores.

*   **Config Centralization:**
    *   Valores de configuração, constantes globais e strings mágicas devem ser centralizados em arquivos de configuração (e.g., `.env`, `config/*.js`) ou constantes dedicadas.
    *   Evite valores codificados diretamente no código da aplicação.

*   **Performance Integration:**
    *   Novos componentes e funcionalidades devem ser integrados com benchmarks de desempenho.
    *   Portões de desempenho devem ser aprovados antes do merge, garantindo que não haja regressões.

*   **Production Readiness:**
    *   Tratamento de erros robusto e gracioso.
    *   Limpeza de recursos (e.g., conexões de banco de dados, streams) em classes e serviços.
    *   Considerações multiplataforma (se aplicável) devem ser incorporadas no design.

### Portões de Qualidade de Código

*   **Nomenclatura Autoexplicativa:**
    *   Variáveis, funções, classes e métodos devem ter nomes claros e descritivos, que expressem seu propósito sem a necessidade de comentários excessivos.
    *   Siga as convenções de nomenclatura do JavaScript (e.g., `camelCase` para variáveis e funções, `PascalCase` para classes).

*   **Detecção de Regressão:**
    *   Qualquer alteração de código deve ser acompanhada por testes que garantam que o desempenho não foi degradado.
    *   Ferramentas de benchmarking devem ser executadas em CI/CD para detectar regressões automaticamente.

*   **Utilização de Recursos:**
    *   O código deve utilizar recursos (memória, CPU, rede) de forma eficiente, dentro dos limites definidos para o projeto.

## Implementation Notes

[Use esta seção para registrar decisões de design, aprendizados, problemas encontrados e soluções durante a implementação de funcionalidades JavaScript. Referencie ADRs relevantes e discussões.]

## MDC Compliance Checklist

- [ ] **SoC Validado:** Módulos com responsabilidade única.
- [ ] **Tamanho de Arquivo:** `.js`/`.jsx` ≤150 linhas.
- [ ] **DRY Aplicado:** Sem duplicação de código.
- [ ] **KISS Respeitado:** Soluções simples e diretas.
- [ ] **Config Centralizada:** Sem valores codificados.
- [ ] **Performance Integrada:** Benchmarks aprovados.
- [ ] **Pronto para Produção:** Tratamento de erros e limpeza de recursos.
- [ ] **Nomenclatura Clara:** Nomes autoexplicativos (convenções JavaScript).
- [ ] **Regressão Verificada:** Sem degradação de desempenho.
- [ ] **Recursos Otimizados:** Utilização eficiente de recursos.


