---
title: "Supabase Official Development Standards"
description: "Official Supabase development patterns, templates, and best practices based on official documentation"
globs: ['**/*.sql', '**/*.js', '**/*.ts', '**/supabase/**', '**/migrations/**', '**/functions/**', '**/edge-functions/**']
activation: "onLanguage:sql,javascript,typescript,plpgsql"
version: "2.0"
created: "2025-09-12"
updated: "2025-09-12"
---

### Supabase Official Development Standards

### Overview
Official development standards and templates for Supabase projects, based on the official Supabase documentation and AI editor rules. These patterns ensure security, performance, and maintainability in Supabase applications.

### Official Rule Installation
```bash
npx shadcn@latest add https://supabase.com/ui/r/ai-editor-rules.json
```

### Database Functions - Official Templates

### Standard Function Template (MANDATORY)
```sql
create or replace function my_schema.function_name(param_name param_type)
returns return_type
language plpgsql
security invoker
set search_path = ''
as $$
declare
  variable_name variable_type;
begin
  -- Validation
  if param_name is null then
    raise exception 'Parameter cannot be null';
  end if;
  
  -- Function logic with fully qualified names
  select column_name
  into variable_name
  from my_schema.table_name
  where condition = param_name;
  
  return variable_name;
exception
  when others then
    raise exception 'Function error: %', sqlerrm;
end;
$$;
```

### Security Configuration (REQUIRED)

### Default Security Settings
- **SECURITY INVOKER**: Default for all functions (runs with caller's permissions)
- **SET search_path = ''**: Always use empty search_path to prevent schema injection
- **Fully Qualified Names**: Always use `schema_name.table_name` format
- **Explicit Parameter Types**: Define clear input/output types

### SECURITY DEFINER Usage (Use Sparingly)
```sql
-- Only when elevated privileges are explicitly required
create or replace function public.admin_function()
returns void
language plpgsql
security definer -- Explicit justification required
set search_path = ''
as $$
begin
  -- Administrative operations requiring elevated privileges
  -- Clear documentation of why SECURITY DEFINER is needed
end;
$$;
```

### Performance Classification Templates

### IMMUTABLE Functions (Maximum Performance)
```sql
create or replace function public.calculate_tax_rate(amount numeric, rate numeric)
returns numeric
language sql
security invoker
set search_path = ''
immutable -- Same inputs always produce same outputs
as $$
  select amount * rate / 100;
$$;
```

### STABLE Functions (Read-Only Operations)
```sql
create or replace function public.get_user_profile(user_id uuid)
returns json
language plpgsql
security invoker
set search_path = ''
stable -- Doesn't modify data, consistent within transaction
as $$
declare
  profile json;
begin
  select row_to_json(u)
  into profile
  from public.users u
  where u.id = user_id;
  
  return profile;
end;
$$;
```

### VOLATILE Functions (Side Effects)
```sql
create or replace function public.create_audit_log(action text, details json)
returns uuid
language plpgsql
security invoker
set search_path = ''
-- VOLATILE is default for functions with side effects
as $$
declare
  log_id uuid;
begin
  insert into public.audit_logs (action, details, created_at)
  values (action, details, now())
  returning id into log_id;
  
  return log_id;
end;
$$;
```

### Trigger Functions - Official Patterns

### Updated At Trigger Template
```sql
create or replace function public.handle_updated_at()
returns trigger
language plpgsql
security invoker
set search_path = ''
as $$
begin
  new.updated_at := now();
  return new;
end;
$$;

-- Apply to table
create trigger handle_updated_at_trigger
  before update on public.table_name
  for each row
  execute function public.handle_updated_at();
```

### Audit Trail Trigger Template
```sql
create or replace function public.handle_audit_trail()
returns trigger
language plpgsql
security invoker
set search_path = ''
as $$
begin
  if tg_op = 'DELETE' then
    insert into public.audit_trail (table_name, operation, old_data, created_at)
    values (tg_table_name, tg_op, row_to_json(old), now());
    return old;
  elsif tg_op = 'UPDATE' then
    insert into public.audit_trail (table_name, operation, old_data, new_data, created_at)
    values (tg_table_name, tg_op, row_to_json(old), row_to_json(new), now());
    return new;
  elsif tg_op = 'INSERT' then
    insert into public.audit_trail (table_name, operation, new_data, created_at)
    values (tg_table_name, tg_op, row_to_json(new), now());
    return new;
  end if;
  return null;
end;
$$;
```

### Row Level Security (RLS) Patterns

### User-Based RLS Policy Template
```sql
-- Enable RLS on table
alter table public.user_data enable row level security;

-- Policy for users to access only their own data
create policy "Users can access own data"
on public.user_data
for all
using (auth.uid() = user_id);

-- Policy for authenticated users to insert their own data
create policy "Users can insert own data"
on public.user_data
for insert
with check (auth.uid() = user_id);
```

### Role-Based RLS Policy Template
```sql
-- Admin access policy
create policy "Admins have full access"
on public.sensitive_data
for all
using (
  exists (
    select 1 from public.user_roles ur
    where ur.user_id = auth.uid()
    and ur.role = 'admin'
  )
);

-- Read-only policy for specific role
create policy "Managers can read data"
on public.reports
for select
using (
  exists (
    select 1 from public.user_roles ur
    where ur.user_id = auth.uid()
    and ur.role in ('admin', 'manager')
  )
);
```

### Migration Patterns

### Safe Migration Template
```sql
-- Migration: Add new column with default value
-- File: supabase/migrations/20250912000001_add_status_column.sql

begin;

-- Add column with default value
alter table public.orders 
add column if not exists status text default 'pending';

-- Add constraint after column exists
alter table public.orders 
add constraint orders_status_check 
check (status in ('pending', 'processing', 'completed', 'cancelled'));

-- Create index for performance
create index if not exists idx_orders_status 
on public.orders (status);

commit;
```

### Rollback Migration Template
```sql
-- Rollback: Remove status column
-- File: supabase/migrations/20250912000001_add_status_column_rollback.sql

begin;

-- Remove constraint first
alter table public.orders 
drop constraint if exists orders_status_check;

-- Remove index
drop index if exists idx_orders_status;

-- Remove column
alter table public.orders 
drop column if exists status;

commit;
```

### Edge Functions - Official Patterns

### Basic Edge Function Template
```typescript
// supabase/functions/function-name/index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Initialize Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        auth: {
          autoRefreshToken: false,
          persistSession: false
        }
      }
    )

    // Get user from Authorization header
    const authHeader = req.headers.get('Authorization')!
    const token = authHeader.replace('Bearer ', '')
    const { data: { user } } = await supabaseClient.auth.getUser(token)

    if (!user) {
      throw new Error('Unauthorized')
    }

    // Function logic here
    const { data, error } = await supabaseClient
      .from('table_name')
      .select('*')
      .eq('user_id', user.id)

    if (error) throw error

    return new Response(
      JSON.stringify({ data }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      },
    )
  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400,
      },
    )
  }
})
```

### Realtime Patterns

### Client-Side Realtime Subscription
```typescript
// Subscribe to table changes
const subscription = supabase
  .channel('table-changes')
  .on(
    'postgres_changes',
    {
      event: '*', // Listen to all changes
      schema: 'public',
      table: 'messages'
    },
    (payload) => {
      console.log('Change received!', payload)
      // Handle the change
    }
  )
  .subscribe()

// Subscribe to specific user's data
const userSubscription = supabase
  .channel('user-data')
  .on(
    'postgres_changes',
    {
      event: '*',
      schema: 'public',
      table: 'user_profiles',
      filter: `user_id=eq.${userId}`
    },
    handleUserDataChange
  )
  .subscribe()
```

### Realtime Presence Pattern
```typescript
// Track user presence
const presenceChannel = supabase.channel('room-1')

presenceChannel
  .on('presence', { event: 'sync' }, () => {
    const newState = presenceChannel.presenceState()
    console.log('sync', newState)
  })
  .on('presence', { event: 'join' }, ({ key, newPresences }) => {
    console.log('join', key, newPresences)
  })
  .on('presence', { event: 'leave' }, ({ key, leftPresences }) => {
    console.log('leave', key, leftPresences)
  })
  .subscribe(async (status) => {
    if (status !== 'SUBSCRIBED') { return }
    
    await presenceChannel.track({
      user_id: userId,
      online_at: new Date().toISOString(),
    })
  })
```

### Error Handling Patterns

### Database Function Error Handling
```sql
create or replace function public.safe_operation(input_data json)
returns json
language plpgsql
security invoker
set search_path = ''
as $$
declare
  result json;
begin
  -- Input validation
  if input_data is null or input_data = '{}' then
    raise exception 'Invalid input data provided';
  end if;
  
  -- Main operation with error handling
  begin
    -- Your operation here
    select row_to_json(t) into result
    from (select 'success' as status, input_data as data) t;
    
  exception
    when unique_violation then
      raise exception 'Duplicate entry detected';
    when foreign_key_violation then
      raise exception 'Referenced record does not exist';
    when check_violation then
      raise exception 'Data validation failed';
    when others then
      raise exception 'Operation failed: %', sqlerrm;
  end;
  
  return result;
end;
$$;
```

### Client-Side Error Handling
```typescript
// Comprehensive error handling for Supabase operations
async function safeSupabaseOperation<T>(
  operation: () => Promise<{ data: T | null; error: any }>
): Promise<T> {
  try {
    const { data, error } = await operation()
    
    if (error) {
      // Handle specific Supabase errors
      if (error.code === 'PGRST116') {
        throw new Error('No data found')
      } else if (error.code === '23505') {
        throw new Error('Duplicate entry')
      } else if (error.code === '42501') {
        throw new Error('Insufficient permissions')
      } else {
        throw new Error(`Database error: ${error.message}`)
      }
    }
    
    if (!data) {
      throw new Error('No data returned')
    }
    
    return data
  } catch (error) {
    console.error('Supabase operation failed:', error)
    throw error
  }
}

// Usage example
try {
  const userData = await safeSupabaseOperation(() =>
    supabase
      .from('users')
      .select('*')
      .eq('id', userId)
      .single()
  )
  
  console.log('User data:', userData)
} catch (error) {
  console.error('Failed to fetch user:', error.message)
}
```

### Naming Conventions

### Database Objects
- **Tables**: `snake_case` (e.g., `user_profiles`, `order_items`)
- **Columns**: `snake_case` (e.g., `created_at`, `user_id`)
- **Functions**: `snake_case` with descriptive names (e.g., `calculate_total_price`)
- **Schemas**: `snake_case` (e.g., `public`, `auth`, `storage`)

### TypeScript/JavaScript
- **Variables**: `camelCase` (e.g., `userData`, `totalPrice`)
- **Functions**: `camelCase` (e.g., `getUserProfile`, `calculateTotal`)
- **Constants**: `UPPER_SNAKE_CASE` (e.g., `API_URL`, `MAX_RETRIES`)
- **Types/Interfaces**: `PascalCase` (e.g., `UserProfile`, `OrderItem`)

### Project Structure Recommendations

### Supabase Project Structure
```
project/
├── supabase/
│   ├── functions/           # Edge Functions
│   │   └── function-name/
│   │       └── index.ts
│   ├── migrations/          # Database migrations
│   │   └── 20250912000001_initial_schema.sql
│   ├── seed.sql            # Initial data
│   └── config.toml         # Supabase configuration
├── .cursor/
│   └── rules/              # Cursor rules
│       ├── create-db-functions.mdc
│       ├── create-migration.mdc
│       ├── create-rls-policies.mdc
│       ├── postgres-sql-style-guide.mdc
│       ├── use-realtime.mdc
│       └── writing-supabase-edge-functions.mdc
└── src/
    ├── lib/
    │   └── supabase.ts     # Supabase client configuration
    └── types/
        └── database.ts     # Generated database types
```

### Integration with Existing Rules
- **@ref:70-database-standards.mdc**: Core database practices
- **@ref:40-security.mdc**: Security implementation patterns
- **@ref:50-frontend-standards.mdc**: Client-side integration patterns

This comprehensive guide ensures adherence to official Supabase development standards and best practices.
