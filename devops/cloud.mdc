
---
description: "Cloud provider rules for AWS, GCP, and Azure infrastructure"
globs: ["**/terraform/*.tf", "**/cloudformation/*.yml", "**/gcp/*.yaml", "**/azure/*.json"]
alwaysApply: false
---

# Cloud Infrastructure Rules

## Core Principles
- **Infrastructure as Code**: All infrastructure must be version controlled
- **Security First**: Implement least privilege and defense in depth
- **Cost Optimization**: Monitor and optimize cloud spending
- **Multi-Cloud Strategy**: Avoid vendor lock-in where possible
- **Disaster Recovery**: Plan for failure and implement backup strategies

## AWS Best Practices

### Terraform AWS Configuration
```hcl
# ✅ Good - AWS provider with security best practices
terraform {
  required_version = ">= 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
  
  backend "s3" {
    bucket         = "terraform-state-bucket"
    key            = "infrastructure/terraform.tfstate"
    region         = "us-west-2"
    encrypt        = true
    dynamodb_table = "terraform-locks"
  }
}

provider "aws" {
  region = var.aws_region
  
  default_tags {
    tags = {
      Environment = var.environment
      Project     = var.project_name
      ManagedBy   = "terraform"
      Owner       = var.team_name
    }
  }
}

# VPC with security groups
resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  enable_dns_hostnames = true
  enable_dns_support   = true
  
  tags = {
    Name = "${var.project_name}-vpc"
  }
}

resource "aws_security_group" "app" {
  name_prefix = "${var.project_name}-app-"
  vpc_id      = aws_vpc.main.id
  
  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = {
    Name = "${var.project_name}-app-sg"
  }
}

# EKS Cluster with security
resource "aws_eks_cluster" "main" {
  name     = "${var.project_name}-cluster"
  role_arn = aws_iam_role.eks_cluster.arn
  version  = "1.28"
  
  vpc_config {
    subnet_ids              = aws_subnet.private[*].id
    endpoint_private_access = true
    endpoint_public_access  = true
    public_access_cidrs     = var.allowed_cidr_blocks
  }
  
  encryption_config {
    provider {
      key_arn = aws_kms_key.eks.arn
    }
    resources = ["secrets"]
  }
  
  enabled_cluster_log_types = [
    "api", "audit", "authenticator", "controllerManager", "scheduler"
  ]
  
  depends_on = [
    aws_iam_role_policy_attachment.eks_cluster_policy,
    aws_iam_role_policy_attachment.eks_vpc_resource_controller,
  ]
}
```

### AWS Security Configuration
```yaml
# ✅ Good - CloudFormation security template
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security baseline for AWS account'

Parameters:
  Environment:
    Type: String
    AllowedValues: [dev, staging, production]
    Default: production

Resources:
  # CloudTrail for audit logging
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: !Sub '${Environment}-security-audit-trail'
      S3BucketName: !Ref CloudTrailBucket
      S3KeyPrefix: 'cloudtrail-logs/'
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      EventSelectors:
        - ReadWriteType: All
          IncludeManagementEvents: true
          DataResources:
            - Type: 'AWS::S3::Object'
              Values: ['arn:aws:s3:::*/*']
            - Type: 'AWS::Lambda::Function'
              Values: ['arn:aws:lambda:*:*:function:*']

  # GuardDuty for threat detection
  GuardDuty:
    Type: AWS::GuardDuty::Detector
    Properties:
      Enable: true
      FindingPublishingFrequency: FIFTEEN_MINUTES

  # Config for compliance monitoring
  ConfigurationRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      Name: !Sub '${Environment}-config-recorder'
      RoleARN: !GetAtt ConfigRole.Arn
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true

  # Security Hub for centralized security findings
  SecurityHub:
    Type: AWS::SecurityHub::Hub
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # IAM password policy
  PasswordPolicy:
    Type: AWS::IAM::AccountPasswordPolicy
    Properties:
      MinimumPasswordLength: 14
      RequireUppercaseCharacters: true
      RequireLowercaseCharacters: true
      RequireNumbers: true
      RequireSymbols: true
      MaxPasswordAge: 90
      PasswordReusePrevention: 12
      HardExpiry: false
```

## Google Cloud Platform (GCP)

### GCP Terraform Configuration
```hcl
# ✅ Good - GCP provider configuration
terraform {
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 4.0"
    }
    google-beta = {
      source  = "hashicorp/google-beta"
      version = "~> 4.0"
    }
  }
}

provider "google" {
  project = var.project_id
  region  = var.region
  zone    = var.zone
}

# GKE cluster with security hardening
resource "google_container_cluster" "primary" {
  name     = "${var.project_name}-gke-cluster"
  location = var.region
  
  # Security configurations
  enable_shielded_nodes = true
  enable_network_policy = true
  
  # Private cluster configuration
  private_cluster_config {
    enable_private_nodes    = true
    enable_private_endpoint = false
    master_ipv4_cidr_block  = "172.16.0.0/28"
  }
  
  # Master authorized networks
  master_authorized_networks_config {
    cidr_blocks {
      cidr_block   = var.authorized_cidr
      display_name = "Authorized network"
    }
  }
  
  # Workload Identity
  workload_identity_config {
    workload_pool = "${var.project_id}.svc.id.goog"
  }
  
  # Binary Authorization
  binary_authorization {
    evaluation_mode = "PROJECT_SINGLETON_POLICY_ENFORCE"
  }
  
  # Logging and monitoring
  logging_config {
    enable_components = [
      "SYSTEM_COMPONENTS",
      "WORKLOADS",
      "API_SERVER"
    ]
  }
  
  monitoring_config {
    enable_components = [
      "SYSTEM_COMPONENTS",
      "WORKLOADS"
    ]
  }
  
  # Node pool configuration
  node_pool {
    name       = "default-pool"
    node_count = 1
    
    node_config {
      machine_type = "e2-medium"
      
      # Security configurations
      shielded_instance_config {
        enable_secure_boot          = true
        enable_integrity_monitoring = true
      }
      
      # Service account with minimal permissions
      service_account = google_service_account.gke_nodes.email
      oauth_scopes = [
        "https://www.googleapis.com/auth/cloud-platform"
      ]
    }
  }
}

# Cloud SQL with security
resource "google_sql_database_instance" "main" {
  name             = "${var.project_name}-db"
  database_version = "POSTGRES_14"
  region           = var.region
  
  settings {
    tier = "db-f1-micro"
    
    # Security settings
    backup_configuration {
      enabled                        = true
      start_time                     = "03:00"
      point_in_time_recovery_enabled = true
    }
    
    ip_configuration {
      ipv4_enabled    = false
      private_network = google_compute_network.vpc.id
      require_ssl     = true
    }
    
    database_flags {
      name  = "log_checkpoints"
      value = "on"
    }
    
    database_flags {
      name  = "log_connections"
      value = "on"
    }
    
    database_flags {
      name  = "log_disconnections"
      value = "on"
    }
  }
  
  deletion_protection = true
}
```

## Azure Best Practices

### Azure Resource Manager Template
```json
{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "environment": {
      "type": "string",
      "allowedValues": ["dev", "staging", "production"],
      "defaultValue": "production"
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    }
  },
  "variables": {
    "resourcePrefix": "[concat('myapp-', parameters('environment'))]"
  },
  "resources": [
    {
      "type": "Microsoft.ContainerService/managedClusters",
      "apiVersion": "2023-03-01",
      "name": "[concat(variables('resourcePrefix'), '-aks')]",
      "location": "[parameters('location')]",
      "properties": {
        "kubernetesVersion": "1.28.0",
        "dnsPrefix": "[concat(variables('resourcePrefix'), '-dns')]",
        "agentPoolProfiles": [
          {
            "name": "nodepool1",
            "count": 3,
            "vmSize": "Standard_D2s_v3",
            "osType": "Linux",
            "mode": "System",
            "enableAutoScaling": true,
            "minCount": 1,
            "maxCount": 10
          }
        ],
        "servicePrincipalProfile": {
          "clientId": "[parameters('servicePrincipalClientId')]",
          "secret": "[parameters('servicePrincipalClientSecret')]"
        },
        "networkProfile": {
          "networkPlugin": "azure",
          "networkPolicy": "calico",
          "serviceCidr": "10.0.0.0/16",
          "dnsServiceIP": "10.0.0.10"
        },
        "aadProfile": {
          "managed": true,
          "adminGroupObjectIDs": ["[parameters('adminGroupObjectId')]"]
        },
        "addonProfiles": {
          "azurePolicy": {
            "enabled": true
          },
          "omsagent": {
            "enabled": true,
            "config": {
              "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', concat(variables('resourcePrefix'), '-logs'))]"
            }
          }
        }
      }
    }
  ]
}
```

## Multi-Cloud Strategy

### Terraform Multi-Cloud Module
```hcl
# ✅ Good - Multi-cloud abstraction
module "kubernetes_cluster" {
  source = "./modules/kubernetes"
  
  cloud_provider = var.cloud_provider
  cluster_name   = var.cluster_name
  node_count     = var.node_count
  node_size      = var.node_size
  
  # Security settings
  enable_network_policy = true
  enable_pod_security   = true
  enable_rbac          = true
  
  # Monitoring
  enable_logging    = true
  enable_monitoring = true
  
  tags = var.common_tags
}

# Cloud-agnostic outputs
output "cluster_endpoint" {
  value = module.kubernetes_cluster.endpoint
}

output "cluster_ca_certificate" {
  value = module.kubernetes_cluster.ca_certificate
}
```

## Cost Optimization

### AWS Cost Management
```hcl
# ✅ Good - Cost optimization resources
resource "aws_budgets_budget" "monthly" {
  name         = "${var.project_name}-monthly-budget"
  budget_type  = "COST"
  limit_amount = var.monthly_budget_limit
  limit_unit   = "USD"
  time_unit    = "MONTHLY"
  
  cost_filters {
    tag {
      key    = "Project"
      values = [var.project_name]
    }
  }
  
  notification {
    comparison_operator        = "GREATER_THAN"
    threshold                 = 80
    threshold_type            = "PERCENTAGE"
    notification_type         = "ACTUAL"
    subscriber_email_addresses = var.budget_alert_emails
  }
  
  notification {
    comparison_operator        = "GREATER_THAN"
    threshold                 = 100
    threshold_type            = "PERCENTAGE"
    notification_type          = "FORECASTED"
    subscriber_email_addresses = var.budget_alert_emails
  }
}

# Auto Scaling for cost optimization
resource "aws_autoscaling_group" "app" {
  name                = "${var.project_name}-asg"
  vpc_zone_identifier = aws_subnet.private[*].id
  target_group_arns   = [aws_lb_target_group.app.arn]
  health_check_type   = "ELB"
  
  min_size         = var.min_instances
  max_size         = var.max_instances
  desired_capacity = var.desired_instances
  
  # Cost optimization with spot instances
  mixed_instances_policy {
    instances_distribution {
      on_demand_base_capacity                  = 1
      on_demand_percentage_above_base_capacity = 25
      spot_allocation_strategy                 = "diversified"
    }
    
    launch_template {
      launch_template_specification {
        launch_template_id = aws_launch_template.app.id
        version           = "$Latest"
      }
      
      override {
        instance_type     = "t3.medium"
        weighted_capacity = "1"
      }
      
      override {
        instance_type     = "t3.large"
        weighted_capacity = "2"
      }
    }
  }
  
  tag {
    key                 = "Name"
    value               = "${var.project_name}-instance"
    propagate_at_launch = true
  }
}
```

## Best Practices Summary

### Security
- **Identity and Access Management**: Implement least privilege access
- **Network Security**: Use VPCs, security groups, and network policies
- **Encryption**: Encrypt data at rest and in transit
- **Monitoring**: Enable comprehensive logging and monitoring
- **Compliance**: Follow industry standards and regulations

### Cost Management
- **Resource Tagging**: Tag all resources for cost tracking
- **Auto Scaling**: Implement auto scaling for dynamic workloads
- **Reserved Instances**: Use reserved instances for predictable workloads
- **Spot Instances**: Use spot instances for fault-tolerant workloads
- **Budget Alerts**: Set up budget alerts and cost monitoring

### Reliability
- **Multi-AZ Deployment**: Deploy across multiple availability zones
- **Backup and Recovery**: Implement automated backup strategies
- **Health Checks**: Configure health checks and auto-recovery
- **Disaster Recovery**: Plan for disaster recovery scenarios
- **Monitoring**: Implement comprehensive monitoring and alerting

